__all__ = [
    'library',
]

_results = {}


"""
✔ Создайте модуль с функцией внутри. 
✔ Функция получает на вход загадку, список с возможными 
вариантами отгадок и количество попыток на угадывание.
✔ Программа возвращает номер попытки, с которой была 
отгадана загадка или ноль, если попытки исчерпаны.
"""


def guess(question: str, answer: list[str], count: int) -> int:
    count_ = 0
    print(question)

    while True:
        count_ += 1
        choice = input('Введите отгадку: ').lower()

        if choice in answer:
            return count_
        if count == count_:
            return 0


"""
✔ Добавьте в модуль с загадками функцию, которая хранит словарь списков. 
✔ Ключ словаря — загадка, значение — список с отгадками. 
✔ Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки. 

"""


def library(count: int) -> None:
    data = {
        'Без окон, без дверей, полна горница людей': ['огурец', 'арбуз', 'помидор'],
        'И зимой и летом одним цветом': ['елка', 'ель', 'ёлка']
    }

    for key, item in data.items():
        add_results(key, guess(key, item, count))

    get_results(_results)


"""
Добавьте в модуль с загадками функцию, которая принимает на вход строку 
(текст загадки) и число (номер попытки, с которой она угадана). 
✔ Функция формирует словарь с информацией о результатах отгадывания. 
✔ Для хранения используйте защищённый словарь уровня модуля.
✔ Отдельно напишите функцию, которая выводит результаты угадывания 
из защищённого словаря в удобном для чтения виде. 
✔ Для формирования результатов используйте генераторное выражение.
"""


def add_results(text: str, count: int) -> None:
    _results[text] = count


def get_results(results: dict) -> None:
    print(*[f'Загадка "{question}" {f"отгадана с {count} попытки" if count else f"не отгадана"}'
            for question, count in results.items()], sep='\n')


if __name__ == '__main__':
    library(3)
